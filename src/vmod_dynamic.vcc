#-
# Copyright (c) 2015-2016 Dridi Boukelmoune
#
# Author: Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

$Module dynamic 3 Varnish DNS Director Module

DESCRIPTION
===========

This module provides a DNS director implementation with limited capabilities.
It currently relies on the default timeouts. DNS lookups are operated by
background threads, one per DNS director domain, and rely on your system's
resolver.

Backends are created and deleted depending on the lookup results, you can
monitor them over time just like regular backends. They will appear in
``varnishstat``'s or any other similar tool's output. The counters will be
dynamic according to the following pattern::

   VBE.<configname>.<directorname>(<ip>).*

When a lookup fails, the backends are left untouched and the error will be
logged with the following event::

   getaddrinfo <errno> (<reason>)

LOGGING
=======

This module may log ``VCL_Log``, ``Error``, and ``Debug``  records following a
common pattern::

   vmod-dynamic: %s %s %s %s [ %s ]
                 |  |  |  |    |
                 |  |  |  |    +- Additional information
                 |  |  |  +------ Event
                 |  |  +--------- Host name
                 |  +------------ Director name
                 +--------------- VCL name

Lookup timestamps are also logged to help troubleshooting, using regular
``Timestamp`` records with the following pattern for event labels::

    vmod-dynamic <vcl>.<director>(<host>) <Lookup|Results|Update>

When a lookup thread is terminated, either because the VCL is cooling down
or the ``domain_usage_timeout`` triggered, ``Timestamp`` records are logged
with the event::

    vmod-dynamic <vcl>.<director>(<host>) Done

Not all logs belong to HTTP transactions, especially since DNS lookups happen
in the background. In order to capture all logs from this module the simplest
way with varnishlog is the following::

    varnishlog -g raw -q '* ~ vmod-dynamic'

It displays any individual record that contains the string ``vmod-dynamic``
whether it belongs to a transaction or not.

.. raw:: pdf

   PageBreak

$Event vmod_event

$Object director(
	STRING port			= "http",
	STRING host_header		= 0,
	PROBE probe			= 0,
	ACL whitelist			= 0,
	DURATION ttl			= 3600,
	DURATION connect_timeout	= 0,
	DURATION first_byte_timeout	= 0,
	DURATION between_bytes_timeout	= 0,
	DURATION domain_usage_timeout	= 7200,
	DURATION first_lookup_timeout	= 10)

Description
	Create a DNS director.

	The director creates backends with DNS lookups and chooses them in a
	round robin fashion. It accepts the following parameters:

	- *port* (defaults to ``"http"``)
	- *host_header* (defaults to none)
	- *probe* (defaults to none)
	- *whitelist* - an acl (defaults to none)
	- *ttl* - delay between lookups (defaults to one hour)
	- *connect_timeout* (defaults to global *connect_timeout*)
	- *first_byte_timeout* (defaults to global *first_byte_timeout*)
	- *between_bytes_timeout* (defaults to global *between_bytes_timeout*)
	- *domain_usage_timeout* - delay until an unused domain and its
	  backends are removed (defaults to two hours)
	- *first_lookup_timeout* - delay until the director fails to provide a
	  backend when a domain is requested for the first time (defaults to
	  ten seconds)

Example
	::

	   probe www_probe {
	   	.window = 8;
	   	.initial = 7;
	   	.threshold = 6;
	   	.interval = 5s;
	   }

	   acl www_acl {
	   	"192.168"/24;
	   }

	   sub vcl_init {
	   	new www_dir = dynamic.director(
	   		port = "80",
	   		probe = www_probe,
	   		whitelist = www_acl,
	   		ttl = 5m);
	   }

	   sub vcl_recv {
	   	set req.backend_hint = www_dir.backend("production.acme.com");
	   }

.. raw:: pdf

   PageBreak

$Method BACKEND .backend(STRING host = "")

Description
	Pick a backend from the director for a given host name. If the host
	is not specified, it is picked from either ``bereq`` or ``req``.

$Method VOID .debug(BOOL)

Description
	Enable or disable debugging for a dynamic director, logging background
	operations related to backends management.

PITFALLS
========

When you are using probes, consider setting the ``initial`` value to at least
as much as the ``threshold``. Otherwise transactions that trigger the first
lookup of a domain are guaranteed to see all the backends as sick and fail.

If all backends starts as healthy (until the probe proves otherwise) a
transaction could still fail if the selected backend is actually sick. This
can be mitigated using the ``retry`` transition in VCL.

There is no support for lookups limited to IPv4 or IPv6 only. However it can
be achieved by the means of a white list::

    acl ipv4_only { "0.0.0.0"/0; }
    acl ipv6_only { "::0"/0; }

With that you can restrict backends to the desired IP network, and monitor
error logs with the ``acl-mismatch`` event. Knowing which addresses were
rejected, you can fix your domains registration (DNS records, hosts file etc).

SEE ALSO
========

``vcl``\(7),
``vsl``\(7),
``vsl-query``\(7),
``varnish-cli``\(7),
``varnish-counters``\(7),
``varnishstat``\(1),
``getaddrinfo``\(3)

COPYRIGHT
=========

This document is licensed under the same licence as vmod-dynamic itself. See
LICENCE for details.

Copyright (c) 2015-2016 Dridi Boukelmoune
